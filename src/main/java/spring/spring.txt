Spring DI - внедрения зависимостей.
Spring IoC - инверсия управления.
Spring MVC - Model View Controller (упрощенное создание веб приложений)
Spring Security - авторизация (либо через пароли, либо токены)
Spring Boot - упрощенная развертка приложений
Spring AOP - Аспектно-ориентированное программирование
Spring REST API - взаимодействие с сервисами путем общения через REST
Spring WebFlux - реактивное программирование
Spring ORM, JDBC, Data - работа с базами данных.
Spring TX - транзакции
Spring Cloud - микросервисы
Spring Integration - кеширование, каналы


// @Component, @Service, @Repository

// @Autowired - говорит нам о том, что мы хотим внедрить данное поле как зависимость Spring
// @Component - говорит , что данный класс является компонентом Spring Beans.
// @Service - говорит, что данный класс является компонентом Spring Beans и данный класс производит работы с бизнес логикой
// ( чаще является прослойкой между БД и контроллером)
// @Repository - говорит, что данный класс является компонентом Spring Beans и работает с Базой данных.

// @Component, @Repository, @Service - по дефолту являются синглотанами.

// Выучить все скоупы бинов. Вопрос на собеседовании - какие области видимости бинов вы знаете?
// Выучить типы внедрения зависимостей - какие типы внедрения зависимостей вы знаете? @Autowired - через конструктор, @Autowired - через поле, @Autowired - через сеттер
// Разобрать в чем отличия.
// Как создать Spring Bean. Что нужно пометить соответствующий класс аннотациями либо @Service, @Component, @Repository (Не только, есть еще)
// Чем отличается аннотация @Component от аннотации @Service. Ответ: ничем не отличается, кроме того, что объясняет Java-разработчику, что, например, класс помеченный
// аннотацией @Service выполняют работу с бизнес логикой.